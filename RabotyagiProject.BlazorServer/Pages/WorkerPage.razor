@page "/worker/{Id:int}"

<div>
    <div class="@_workerClass">
        <div style="text-align: center">
            <h1 @onclick="StartWorkerEdit" style="color: rgb(125, 125, 255); font-family: fantasy;
                                                  display: inline-block; text-decoration: underline">@_worker.Name</h1>
        </div>
        <div style="text-align: center">
            <h1 style="color: rgb(125, 125, 255); display: inline-block; font-family: fantasy">@_worker.Mail</h1>
            <h1 style="color: rgb(125, 125, 255); display: inline-block; margin-left: 50px; font-family: fantasy">@_worker.Phone</h1>
        </div>
    </div>
    <div class="@_workerClassTwo">
        <EditForm Model="@_editedWorker" OnSubmit="@CompleteWorkerEdit">
            <div style="text-align: center; height: 40px">
                <input class="Id-Slot" @onchange="ChangingName" placeholder="@_editedWorker.Name"
                       style="width: 300px; font-size: 36px; color: rgb(125, 125, 255)">
                <button class="Accept-Button" type="submit" style="vertical-align: super">Done</button>
            </div>
            <div style="height:10px"></div>
            <div style="text-align: center;">
                <div style="display: inline-block">
                    <input class="Id-Slot" type="email" @onchange="ChangingMail" placeholder="@_editedWorker.Mail"
                           style="width: 300px; font-size: 36px; color: rgb(125, 125, 255); margin: 0 auto">
                </div>
                <div style="display: inline-block">
                    <input class="Id-Slot" type="number" @onchange="ChangingPhone" placeholder="@_editedWorker.Phone"
                           style="width: 300px; font-size: 36px;  margin-left: 50px; color: rgb(125, 125, 255)">
                </div>
            </div>
        </EditForm>
    </div>
</div>

<div style=" text-align: center">
    <div class="@_serviceClass" style="text-align: center">
        <h1 @onclick="StartWorkerServiceAdding" 
            style="color: blueviolet; display: inline-block; font-family: fantasy; text-decoration: underline">Услуги</h1>
    </div>

    <div class="@_serviceClassTwo" style="text-align: center">
        <EditForm Model="@_newService" OnSubmit="@BackFromWorkerServiceAdding">
            <button class="Accept-Button" @onclick="CompleteWorkerServiceAdding" style="vertical-align: super">Done</button>
            <button class="Accept-Button" type="submit" style="vertical-align: super">Back</button> <br />
            <div class="Id-Slot" style="display: inline-block; font-size: 24px; vertical-align: super">😳</div>
            <InputSelect class="Table-Slot" @bind-Value="_newService.Type" 
                         style="width: 400px; display: inline-block; vertical-align: super;font-size: 28px">
                <option value="">Произведите выбор...</option>
                @foreach (var service in _newServicesForWorker)
                {
                    <option value="@service.Type">@service.Type</option>
                }
            </InputSelect>
            <input class="Table-Slot" @bind="_newService.Cost"
                   style="width: 200px; font-size: 28px; text-align: center;
                          display: inline-block; vertical-align: top; padding-bottom: 0;padding-top: 0">
        </EditForm>
    </div>
    @if (_worker.Service.Count > 0)
    {
        <WorkerServiceTemplate Services="_worker.Service" Id="_worker.Id" />
    }
    else
    {
        <div class="Table-Slot" style="background: rgb(238, 221, 255); width: 800px; margin: auto">
            <h3 style="text-align: center; color:rgb(121,34,204)"> Этот работяга пока ещё не предоставляет услуг! </h3>
        </div>
    }
</div>

<div style="text-align: center">
    <div class="@_timetableClass" style="text-align: center">
        <h1 @onclick="StartTimetableAdding" style="color: blueviolet; display: inline-block; 
                   font-family: fantasy; text-decoration: underline">Расписание</h1>
    </div>
    <div class="@_timetableClassTwo" style="text-align: center">
        <EditForm Model="@_newBusyTime" OnSubmit="@BackFromTimetableAdding">
            <button class="Accept-Button" @onclick="CompleteTimetableAdding"  style="vertical-align: super">Done</button>
            <button class="Accept-Button" type="submit" style="vertical-align: super">Back</button> <br />
            <div>
                <InputSelect class="Table-Slot" @bind-Value="_workingDayId"
                             style="width: 400px; display: inline-block; vertical-align: super; font-size: 28px">
                    <option value="0">Выберите день...</option>
                    @foreach (var day in _daysForNewBusyTime)
                    {
                        <option value="@day.Id">@DateOnly.FromDateTime(day.Date)</option>
                    }
                </InputSelect>
                <input class="Table-Slot" @bind="_newBusyTime.StartTime"
                       style="width: 200px; font-size: 28px; text-align: center;
                              display: inline-block; vertical-align: top; padding-bottom: 0;padding-top: 0">
                <input class="Table-Slot" @bind="_newBusyTime.EndTime"
                       style="width: 200px; font-size: 28px; text-align: center;
                              display: inline-block; vertical-align: top; padding-bottom: 0;padding-top: 0">
            </div>
        </EditForm>
        </div>
    @if (new TimetableManager().GetAllTimetableByWorkerId(_worker.Id).Count > 0)
    {
        <table style="margin: auto">
                <tr>
                    <td>
                        <div class="Id-Slot" style="width: 200px">
                            <h3 style="text-align: center"> Рабочий день </h3> </div> </td>
                    <td>
                        <div class="Id-Slot" style="width: 400px">
                            <h3 style="text-align: center"> Занятое время </h3> </div> </td>
                </tr>
                @foreach (var slot in new TimetableManager().GetAllTimetableByWorkerId(_worker.Id))
                {
                    <OneDayWorkerWorkTimeTemplate Id="_worker.Id" Slot="slot" BtnEvent="DeleteWorkingDay"></OneDayWorkerWorkTimeTemplate>
                }
            </table>
    }
    else
    {
        <div class="Table-Slot" style="background: rgb(238, 221, 255); width: 800px; margin: auto">
            <h3 style="text-align: center; color: rgb(121, 34, 204)"> У этого работяги пока ещё нет заказов! </h3>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    private WorkerOutputModel _worker = new();
    private readonly WorkerInputModel _editedWorker = new();
    private readonly List<ServiceOutputModel> _newServicesForWorker = new();
    private readonly List<WorkingDayOutputModel> _daysForNewBusyTime = new();
    private ServiceInputModel _newService = new();
    private BusyTimeInputModel _newBusyTime = new();
    private string _workerClass = "Visible-Content";
    private string _workerClassTwo = "Hidden-Content";
    private string _serviceClass = "Visible-Content";
    private string _serviceClassTwo = "Hidden-Content";
    private string _timetableClass = "Visible-Content";
    private string _timetableClassTwo = "Hidden-Content";
    private int _workingDayId;

    protected override void OnInitialized()
    {
        try
        {
            _worker = new WorkerManager().GetWorkerById(Id);
            CopyOutputModelToInput();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
        
        _newService = new();

        foreach (var service in new ServiceManager().GetAllServices().
            Where(service => !_worker.Service.Contains(_worker.Service.Find(x => x.Id == service.Id))))
        {
            _newServicesForWorker.Add(service);
        }
        var today = DateTime.Today;
        foreach (var day in new WorkingDayManager().GetAllWorkingDays().
            Where(day => (day.Date > today && day.Date < today.AddDays(500))))
        {
            _daysForNewBusyTime.Add(day);
        }
    }

    private void DeleteWorkingDay(TimetableInputModel model)
    {
        new TimetableManager().UpdateTimetableById(model);
        InvokeAsync(StateHasChanged);
    }

    private void StartWorkerEdit()
    {
        _workerClass = "Hidden-Content";
        _workerClassTwo = "Visible-Content";
    }
    private void CompleteWorkerEdit()
    {
        _workerClass = "Visible-Content";
        _workerClassTwo = "Hidden-Content";
        new WorkerManager().UpdateWorkerById(_editedWorker);
        _worker = new WorkerManager().GetWorkerById(Id);
    }

    private void ChangingName(ChangeEventArgs e)
    {
        _editedWorker.Name = e.Value == string.Empty ? _worker.Name : e.Value.ToString();
    }
    private void ChangingMail(ChangeEventArgs e)
    {
        _editedWorker.Mail = e.Value == string.Empty ? _worker.Mail : e.Value.ToString();
    }
    private void ChangingPhone(ChangeEventArgs e)
    {
        try
        {
            Convert.ToInt64(e.Value.ToString());
            _editedWorker.Phone = e.Value == string.Empty ? _worker.Phone : e.Value.ToString();
        }
        catch
        {
            _editedWorker.Phone = _worker.Phone;
        }
    }

    private void StartWorkerServiceAdding()
    {
        _serviceClass = "Hidden-Content";
        _serviceClassTwo = "Visible-Content";
    }
    private void BackFromWorkerServiceAdding()
    {
        _serviceClass = "Visible-Content";
        _serviceClassTwo = "Hidden-Content";
        _newService = new();
    }
    private void CompleteWorkerServiceAdding()
    {
        if (_newService.Type is not null && _newService.Cost is not null)
        {
            _newService.Id = new ServiceManager().GetAllServices().Find(x => x.Type == _newService.Type).Id;
            new WorkerManager().AddNewServiceToWorker(Id, _newService);
            _newServicesForWorker.Remove(_newServicesForWorker.Find(x => x.Id == _newService.Id));
            _worker = new WorkerManager().GetWorkerById(Id);
        }
        BackFromWorkerServiceAdding();
    }

    private void StartTimetableAdding()
    {
        _timetableClass = "Hidden-Content";
        _timetableClassTwo = "Visible-Content";
    }
    private void BackFromTimetableAdding()
    {
        _timetableClass = "Visible-Content";
        _timetableClassTwo = "Hidden-Content";
        _newBusyTime = new();
        _workingDayId = 0;
    }
    private void CompleteTimetableAdding()
    {
        if (_workingDayId != 0)
        {
            var tmp = new TimetableManager().GetAllTimetableByWorkerId(Id).
                Find(x => x.WorkingDayId == _workingDayId);
            if (tmp is null)
            {
                new TimetableManager().AddNewTimetable( Id, _workingDayId );
                _newBusyTime.TimetableId = new TimetableManager().GetAllTimetableByWorkerId(Id).
                    Find(x => x.WorkingDayId == _workingDayId).Id;
            }
            else
            {
                _newBusyTime.TimetableId = tmp.Id;
            }
            new BusyTimeManager().AddNewBusyTime(_newBusyTime);
            InvokeAsync(StateHasChanged);
        }
    }

    private void CopyOutputModelToInput()
    {
        _editedWorker.Id = _worker.Id;
        _editedWorker.Name = _worker.Name;
        _editedWorker.Mail = _worker.Mail;
        _editedWorker.Phone = _worker.Phone;
        foreach (var service in _worker.Service)
        {
            _newService.Id = service.Id;
            _newService.Type = service.Type;
            _newService.Cost = service.Cost;
            _newService.IsDeleted = service.IsDeleted;
            _editedWorker.Service.Add(_newService);
        }
    }
}